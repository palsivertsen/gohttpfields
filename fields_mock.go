// Code generated by MockGen. DO NOT EDIT.
// Source: fields.go

// Package fields is a generated GoMock package.
package fields

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockBodyDecoder is a mock of BodyDecoder interface
type MockBodyDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockBodyDecoderMockRecorder
}

// MockBodyDecoderMockRecorder is the mock recorder for MockBodyDecoder
type MockBodyDecoderMockRecorder struct {
	mock *MockBodyDecoder
}

// NewMockBodyDecoder creates a new mock instance
func NewMockBodyDecoder(ctrl *gomock.Controller) *MockBodyDecoder {
	mock := &MockBodyDecoder{ctrl: ctrl}
	mock.recorder = &MockBodyDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBodyDecoder) EXPECT() *MockBodyDecoderMockRecorder {
	return m.recorder
}

// DecodeBody mocks base method
func (m *MockBodyDecoder) DecodeBody(body io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeBody", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecodeBody indicates an expected call of DecodeBody
func (mr *MockBodyDecoderMockRecorder) DecodeBody(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeBody", reflect.TypeOf((*MockBodyDecoder)(nil).DecodeBody), body)
}

// MockPathVarsDecoder is a mock of PathVarsDecoder interface
type MockPathVarsDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockPathVarsDecoderMockRecorder
}

// MockPathVarsDecoderMockRecorder is the mock recorder for MockPathVarsDecoder
type MockPathVarsDecoderMockRecorder struct {
	mock *MockPathVarsDecoder
}

// NewMockPathVarsDecoder creates a new mock instance
func NewMockPathVarsDecoder(ctrl *gomock.Controller) *MockPathVarsDecoder {
	mock := &MockPathVarsDecoder{ctrl: ctrl}
	mock.recorder = &MockPathVarsDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPathVarsDecoder) EXPECT() *MockPathVarsDecoderMockRecorder {
	return m.recorder
}

// DecodePathVars mocks base method
func (m *MockPathVarsDecoder) DecodePathVars(r *http.Request) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodePathVars", r)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// DecodePathVars indicates an expected call of DecodePathVars
func (mr *MockPathVarsDecoderMockRecorder) DecodePathVars(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodePathVars", reflect.TypeOf((*MockPathVarsDecoder)(nil).DecodePathVars), r)
}

// MockPathVarValidator is a mock of PathVarValidator interface
type MockPathVarValidator struct {
	ctrl     *gomock.Controller
	recorder *MockPathVarValidatorMockRecorder
}

// MockPathVarValidatorMockRecorder is the mock recorder for MockPathVarValidator
type MockPathVarValidatorMockRecorder struct {
	mock *MockPathVarValidator
}

// NewMockPathVarValidator creates a new mock instance
func NewMockPathVarValidator(ctrl *gomock.Controller) *MockPathVarValidator {
	mock := &MockPathVarValidator{ctrl: ctrl}
	mock.recorder = &MockPathVarValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPathVarValidator) EXPECT() *MockPathVarValidatorMockRecorder {
	return m.recorder
}

// ValidatePathVar mocks base method
func (m *MockPathVarValidator) ValidatePathVar(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePathVar", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePathVar indicates an expected call of ValidatePathVar
func (mr *MockPathVarValidatorMockRecorder) ValidatePathVar(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePathVar", reflect.TypeOf((*MockPathVarValidator)(nil).ValidatePathVar), key, value)
}
